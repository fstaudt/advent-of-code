package com.github.fstaudt.aoc2024.day14

import com.github.fstaudt.aoc2024.day14.Day14.Display
import com.github.fstaudt.aoc2024.day14.Day14.Position
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

class Day14Test {
    @Test
    fun `part 1 should produce expected result for example`() {
        assertThat(Day14("example_day14.txt", Day14.Bathroom(11, 7)).part1()).isEqualTo(12)
    }

    @Test
    fun `part 1 should produce expected result for my input`() {
        assertThat(Day14().part1()).isEqualTo(230686500)
    }

    @Test
    fun `part 2 should produce expected result for my input`() {
        assertThat(Day14().part2()).isEqualTo(7672)
    }

    @Test
    fun `isChristmasTree should identify a tree in display`() {
        val bathroom = """
            ..........................
            .....................x....
            ....................xx....
            ................x..xxx....
            ...............xx.xxxx....
            ...........x..xxxxxxxx....
            ..........xx.xxxxxxxxx....
            ......x..xxxxxxxxxxxxx....
            .....xx.xxxxxxxxxxxxxx....
            ....xxxxxxxxxxxxxxxxxx....
            ...xxxxxxxxxxxxxxxxxxxxxx.
            ..xxxxxxxxxxxxxxxxxxxxxxx.
            ...xxxxxxxxxxxxxxxxxxxxxx.
            ....xxxxxxxxxxxxxxxxxx....
            .....xx.xxxxxxxxxxxxxx....
            ......x..xxxxxxxxxxxxx....
            ..........xx.xxxxxxxxx....
            ...........x..xxxxxxxx....
            ...............xx.xxxx....
            ................x..xxx....
            ....................xx....
            .....................x....
            ..........................
        """.trimIndent()
        val display = Display(
            bathroom.lines().mapIndexed { i, line -> line.mapIndexed { j, char -> Position(i, j, char == 'x') } })
        assertThat(display.isChristmasTree()).isTrue
    }
}